# TPCDS-Q66
# start query 66 in stream 0 using template query66.tpl using seed 768463979
select
         w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
        ,ship_carriers
        ,year
 	,sum(jan_sales) as jan_sales
 	,sum(feb_sales) as feb_sales
 	,sum(mar_sales) as mar_sales
 	,sum(apr_sales) as apr_sales
 	,sum(may_sales) as may_sales
 	,sum(jun_sales) as jun_sales
 	,sum(jul_sales) as jul_sales
 	,sum(aug_sales) as aug_sales
 	,sum(sep_sales) as sep_sales
 	,sum(oct_sales) as oct_sales
 	,sum(nov_sales) as nov_sales
 	,sum(dec_sales) as dec_sales
 	,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	,sum(jan_net) as jan_net
 	,sum(feb_net) as feb_net
 	,sum(mar_net) as mar_net
 	,sum(apr_net) as apr_net
 	,sum(may_net) as may_net
 	,sum(jun_net) as jun_net
 	,sum(jul_net) as jul_net
 	,sum(aug_net) as aug_net
 	,sum(sep_net) as sep_net
 	,sum(oct_net) as oct_net
 	,sum(nov_net) as nov_net
 	,sum(dec_net) as dec_net
 from (
     select
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'HARMSTORF' || ',' || 'USPS' as ship_carriers
       ,d_year as year
 	,sum(case when d_moy = 1
 		then ws_sales_price* ws_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2
 		then ws_sales_price* ws_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3
 		then ws_sales_price* ws_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4
 		then ws_sales_price* ws_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5
 		then ws_sales_price* ws_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6
 		then ws_sales_price* ws_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7
 		then ws_sales_price* ws_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8
 		then ws_sales_price* ws_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9
 		then ws_sales_price* ws_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10
 		then ws_sales_price* ws_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then ws_sales_price* ws_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then ws_sales_price* ws_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as dec_net
     from
          web_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	  ,ship_mode
     where
            ws_warehouse_sk =  w_warehouse_sk
        and ws_sold_date_sk = d_date_sk
        and ws_sold_time_sk = t_time_sk
 	and ws_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 24285 and 24285+28800
 	and sm_carrier in ('HARMSTORF','USPS')
     group by
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 union all
     select
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'HARMSTORF' || ',' || 'USPS' as ship_carriers
       ,d_year as year
 	,sum(case when d_moy = 1
 		then cs_ext_list_price* cs_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2
 		then cs_ext_list_price* cs_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3
 		then cs_ext_list_price* cs_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4
 		then cs_ext_list_price* cs_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5
 		then cs_ext_list_price* cs_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6
 		then cs_ext_list_price* cs_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7
 		then cs_ext_list_price* cs_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8
 		then cs_ext_list_price* cs_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9
 		then cs_ext_list_price* cs_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10
 		then cs_ext_list_price* cs_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then cs_ext_list_price* cs_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then cs_ext_list_price* cs_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1
 		then cs_net_paid * cs_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2
 		then cs_net_paid * cs_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3
 		then cs_net_paid * cs_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4
 		then cs_net_paid * cs_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5
 		then cs_net_paid * cs_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6
 		then cs_net_paid * cs_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7
 		then cs_net_paid * cs_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8
 		then cs_net_paid * cs_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9
 		then cs_net_paid * cs_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10
 		then cs_net_paid * cs_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then cs_net_paid * cs_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then cs_net_paid * cs_quantity else 0 end) as dec_net
     from
          catalog_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	 ,ship_mode
     where
            cs_warehouse_sk =  w_warehouse_sk
        and cs_sold_date_sk = d_date_sk
        and cs_sold_time_sk = t_time_sk
 	and cs_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 24285 AND 24285+28800
 	and sm_carrier in ('HARMSTORF','USPS')
     group by
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 ) x
 group by
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,ship_carriers
       ,year
 order by w_warehouse_name
 limit 100;

# end query 66 in stream 0 using template query66.tpl
---- PLAN
Max Per-Host Resource Reservation: Memory=64.69MB Threads=1
Per-Host Resource Estimates: Memory=626MB
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=625.64MB mem-reservation=64.69MB thread-reservation=1 runtime-filters-memory=8.00MB
|  max-parallelism=1 segment-costs=[265043986, 528410900, 440, 135, 1936]
PLAN-ROOT SINK
|  output exprs: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`, sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / w_warehouse_sq_ft), sum(feb_sales / w_warehouse_sq_ft), sum(mar_sales / w_warehouse_sq_ft), sum(apr_sales / w_warehouse_sq_ft), sum(may_sales / w_warehouse_sq_ft), sum(jun_sales / w_warehouse_sq_ft), sum(jul_sales / w_warehouse_sq_ft), sum(aug_sales / w_warehouse_sq_ft), sum(sep_sales / w_warehouse_sq_ft), sum(oct_sales / w_warehouse_sq_ft), sum(nov_sales / w_warehouse_sq_ft), sum(dec_sales / w_warehouse_sq_ft), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0 cost=1936
|
22:TOP-N [LIMIT=100]
|  order by: w_warehouse_name ASC
|  mem-estimate=30.56KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=711B cardinality=44 cost=135
|  in pipelines: 22(GETNEXT), 21(OPEN)
|
34:TUPLE CACHE
|  cache key: 85cad3dede6fcc801b891bae811f1971
|  input scan node ids: 1,4,5,3,2,11,14,15,13,12
|  estimated serialized size: 30.73KB
|  estimated serialized size per node: 3.07KB
|  cumulative processing cost: 793455326
|  cache read processing cost: 5
|  cache write processing cost: 84
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=0
|  in pipelines: 21(GETNEXT)
|
21:AGGREGATE [FINALIZE]
|  output: sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(feb_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(mar_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(apr_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(may_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jun_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jul_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(aug_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(sep_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(oct_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(nov_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(dec_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=367
|  in pipelines: 21(GETNEXT), 10(OPEN), 20(OPEN)
|
00:UNION
|  mem-estimate=0B mem-reservation=0B thread-reservation=0
|  tuple-ids=12 row-size=519B cardinality=44 cost=73
|  in pipelines: 10(GETNEXT), 20(GETNEXT)
|
|--33:TUPLE CACHE
|  |  cache key: b9551f5e197af795720dea0798126c05
|  |  input scan node ids: 11,14,15,13,12
|  |  estimated serialized size: 10.98KB
|  |  estimated serialized size per node: 1.10KB
|  |  cumulative processing cost: 528410900
|  |  cache read processing cost: 2
|  |  cache write processing cost: 30
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=22 cost=0
|  |  in pipelines: 20(GETNEXT)
|  |
|  20:AGGREGATE [FINALIZE]
|  |  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=571.89MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=22 cost=26184678
|  |  in pipelines: 20(GETNEXT), 11(OPEN)
|  |
|  19:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_warehouse_sk = w_warehouse_sk
|  |  fk/pk conjuncts: cs_warehouse_sk = w_warehouse_sk
|  |  runtime filters: RF008[bloom] <- w_warehouse_sk, RF009[min_max] <- w_warehouse_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10,8,7 row-size=194B cardinality=8.77M cost=3840707
|  |  in pipelines: 11(GETNEXT), 12(OPEN)
|  |
|  |--32:TUPLE CACHE
|  |  |  cache key: 4115b7332cee5a51ed8109df145f2c0c
|  |  |  input scan node ids: 12
|  |  |  estimated serialized size: 2.73KB
|  |  |  estimated serialized size per node: 2.73KB
|  |  |  cumulative processing cost: 20
|  |  |  cache read processing cost: 2
|  |  |  cache write processing cost: 7
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=7 row-size=123B cardinality=22 cost=0
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  12:SCAN HDFS [tpcds_partitioned_parquet_snap.warehouse]
|  |     HDFS partitions=1/1 files=1 size=5.99KB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     stored statistics:
|  |       table: rows=22 size=5.99KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=22
|  |     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|  |     tuple-ids=7 row-size=123B cardinality=22 cost=20
|  |     in pipelines: 12(GETNEXT)
|  |
|  31:TUPLE CACHE
|  |  cache key: 34d836fa46c07638e7c986984ce6f430
|  |  input scan node ids: 11,14,15,13
|  |  estimated serialized size: 725.10MB
|  |  estimated serialized size per node: 72.51MB
|  |  cumulative processing cost: 498385495
|  |  cache read processing cost: 1166157
|  |  cache write processing cost: 2052884
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=6,9,10,8 row-size=71B cardinality=8.77M cost=0
|  |  in pipelines: 11(GETNEXT)
|  |
|  18:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_sold_date_sk = d_date_sk
|  |  fk/pk conjuncts: cs_sold_date_sk = d_date_sk
|  |  runtime filters: RF010[bloom] <- d_date_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10,8 row-size=71B cardinality=8.77M cost=12638740
|  |  in pipelines: 11(GETNEXT), 13(OPEN)
|  |
|  |--30:TUPLE CACHE
|  |  |  cache key: ff35fce9572f532b9e35ce78520c7cb4
|  |  |  input scan node ids: 13
|  |  |  estimated serialized size: 5.83KB
|  |  |  estimated serialized size per node: 5.83KB
|  |  |  cumulative processing cost: 14675
|  |  |  cache read processing cost: 49
|  |  |  cache write processing cost: 16
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373 cost=0
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  13:SCAN HDFS [tpcds_partitioned_parquet_snap.date_dim]
|  |     HDFS partitions=1/1 files=1 size=2.17MB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: d_year = CAST(2002 AS INT)
|  |     stored statistics:
|  |       table: rows=73.05K size=2.17MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=73.05K
|  |     parquet statistics predicates: d_year = CAST(2002 AS INT)
|  |     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|  |     tuple-ids=8 row-size=12B cardinality=373 cost=14675
|  |     in pipelines: 13(GETNEXT)
|  |
|  17:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_ship_mode_sk = sm_ship_mode_sk
|  |  fk/pk conjuncts: cs_ship_mode_sk = sm_ship_mode_sk
|  |  runtime filters: RF012[bloom] <- sm_ship_mode_sk, RF013[min_max] <- sm_ship_mode_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10 row-size=59B cardinality=43.07M cost=30312049
|  |  in pipelines: 11(GETNEXT), 15(OPEN)
|  |
|  |--29:TUPLE CACHE
|  |  |  cache key: 0f281874dea17d94d140bfdf761e9b42
|  |  |  input scan node ids: 15
|  |  |  estimated serialized size: 53B
|  |  |  estimated serialized size per node: 53B
|  |  |  cumulative processing cost: 3
|  |  |  cache read processing cost: 0
|  |  |  cache write processing cost: 0
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2 cost=0
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  15:SCAN HDFS [tpcds_partitioned_parquet_snap.ship_mode]
|  |     HDFS partitions=1/1 files=1 size=2.68KB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     stored statistics:
|  |       table: rows=20 size=2.68KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=20
|  |     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|  |     tuple-ids=10 row-size=23B cardinality=2 cost=3
|  |     in pipelines: 15(GETNEXT)
|  |
|  16:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_sold_time_sk = t_time_sk
|  |  fk/pk conjuncts: cs_sold_time_sk = t_time_sk
|  |  runtime filters: RF014[bloom] <- t_time_sk, RF015[min_max] <- t_time_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9 row-size=36B cardinality=87.75M(filtered from 430.74M) cost=100565199
|  |  in pipelines: 11(GETNEXT), 14(OPEN)
|  |
|  |--28:TUPLE CACHE
|  |  |  cache key: e90f09625b2af2d467a2cbf45cee8ab4
|  |  |  input scan node ids: 14
|  |  |  estimated serialized size: 101.25KB
|  |  |  estimated serialized size per node: 101.25KB
|  |  |  cumulative processing cost: 14808
|  |  |  cache read processing cost: 1148
|  |  |  cache write processing cost: 279
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K cost=0
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  14:SCAN HDFS [tpcds_partitioned_parquet_snap.time_dim]
|  |     HDFS partitions=1/1 files=1 size=1.31MB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     stored statistics:
|  |       table: rows=86.40K size=1.31MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=86.40K
|  |     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|  |     tuple-ids=9 row-size=8B cardinality=8.64K cost=14808
|  |     in pipelines: 14(GETNEXT)
|  |
|  11:SCAN HDFS [tpcds_partitioned_parquet_snap.catalog_sales]
|     HDFS partitions=1831/1831 files=1831 size=280.96GB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     runtime filters: RF015[min_max] -> cs_sold_time_sk, RF013[min_max] -> cs_ship_mode_sk, RF009[min_max] -> cs_warehouse_sk, RF014[bloom] -> cs_sold_time_sk, RF012[bloom] -> cs_ship_mode_sk, RF010[bloom] -> cs_sold_date_sk, RF008[bloom] -> cs_warehouse_sk
|     stored statistics:
|       table: rows=4.32G size=280.96GB
|       partitions: 1831/1831 rows=4.32G
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=21.52M est-scan-range=374(filtered from 1831)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=6 row-size=28B cardinality=87.75M(filtered from 4.32G) cost=354840021
|     in pipelines: 11(GETNEXT)
|
27:TUPLE CACHE
|  cache key: d61ab713f51bb570df12bfbc928e59cf
|  input scan node ids: 1,4,5,3,2
|  estimated serialized size: 10.98KB
|  estimated serialized size per node: 1.10KB
|  cumulative processing cost: 265043986
|  cache read processing cost: 2
|  cache write processing cost: 30
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=22 cost=0
|  in pipelines: 10(GETNEXT)
|
10:AGGREGATE [FINALIZE]
|  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=538.07MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=22 cost=13142201
|  in pipelines: 10(GETNEXT), 01(OPEN)
|
09:HASH JOIN [INNER JOIN]
|  hash predicates: ws_warehouse_sk = w_warehouse_sk
|  fk/pk conjuncts: ws_warehouse_sk = w_warehouse_sk
|  runtime filters: RF000[bloom] <- w_warehouse_sk, RF001[min_max] <- w_warehouse_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4,2,1 row-size=194B cardinality=4.40M cost=1927671
|  in pipelines: 01(GETNEXT), 02(OPEN)
|
|--26:TUPLE CACHE
|  |  cache key: 4115b7332cee5a51ed8109df145f2c0c
|  |  input scan node ids: 2
|  |  estimated serialized size: 2.73KB
|  |  estimated serialized size per node: 2.73KB
|  |  cumulative processing cost: 20
|  |  cache read processing cost: 2
|  |  cache write processing cost: 7
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=1 row-size=123B cardinality=22 cost=0
|  |  in pipelines: 02(GETNEXT)
|  |
|  02:SCAN HDFS [tpcds_partitioned_parquet_snap.warehouse]
|     HDFS partitions=1/1 files=1 size=5.99KB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     stored statistics:
|       table: rows=22 size=5.99KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=22
|     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|     tuple-ids=1 row-size=123B cardinality=22 cost=20
|     in pipelines: 02(GETNEXT)
|
08:HASH JOIN [INNER JOIN]
|  hash predicates: ws_sold_date_sk = d_date_sk
|  fk/pk conjuncts: ws_sold_date_sk = d_date_sk
|  runtime filters: RF002[bloom] <- d_date_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4,2 row-size=71B cardinality=4.40M cost=6322399
|  in pipelines: 01(GETNEXT), 03(OPEN)
|
|--25:TUPLE CACHE
|  |  cache key: ff35fce9572f532b9e35ce78520c7cb4
|  |  input scan node ids: 3
|  |  estimated serialized size: 5.83KB
|  |  estimated serialized size per node: 5.83KB
|  |  cumulative processing cost: 14675
|  |  cache read processing cost: 49
|  |  cache write processing cost: 16
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373 cost=0
|  |  in pipelines: 03(GETNEXT)
|  |
|  03:SCAN HDFS [tpcds_partitioned_parquet_snap.date_dim]
|     HDFS partitions=1/1 files=1 size=2.17MB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: d_year = CAST(2002 AS INT)
|     stored statistics:
|       table: rows=73.05K size=2.17MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=73.05K
|     parquet statistics predicates: d_year = CAST(2002 AS INT)
|     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|     tuple-ids=2 row-size=12B cardinality=373 cost=14675
|     in pipelines: 03(GETNEXT)
|
07:HASH JOIN [INNER JOIN]
|  hash predicates: ws_ship_mode_sk = sm_ship_mode_sk
|  fk/pk conjuncts: ws_ship_mode_sk = sm_ship_mode_sk
|  runtime filters: RF004[bloom] <- sm_ship_mode_sk, RF005[min_max] <- sm_ship_mode_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4 row-size=59B cardinality=21.54M cost=15198713
|  in pipelines: 01(GETNEXT), 05(OPEN)
|
|--24:TUPLE CACHE
|  |  cache key: 0f281874dea17d94d140bfdf761e9b42
|  |  input scan node ids: 5
|  |  estimated serialized size: 53B
|  |  estimated serialized size per node: 53B
|  |  cumulative processing cost: 3
|  |  cache read processing cost: 0
|  |  cache write processing cost: 0
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2 cost=0
|  |  in pipelines: 05(GETNEXT)
|  |
|  05:SCAN HDFS [tpcds_partitioned_parquet_snap.ship_mode]
|     HDFS partitions=1/1 files=1 size=2.68KB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     stored statistics:
|       table: rows=20 size=2.68KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=20
|     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|     tuple-ids=4 row-size=23B cardinality=2 cost=3
|     in pipelines: 05(GETNEXT)
|
06:HASH JOIN [INNER JOIN]
|  hash predicates: ws_sold_time_sk = t_time_sk
|  fk/pk conjuncts: ws_sold_time_sk = t_time_sk
|  runtime filters: RF006[bloom] <- t_time_sk, RF007[min_max] <- t_time_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3 row-size=36B cardinality=44.04M(filtered from 215.36M) cost=50328453
|  in pipelines: 01(GETNEXT), 04(OPEN)
|
|--23:TUPLE CACHE
|  |  cache key: e90f09625b2af2d467a2cbf45cee8ab4
|  |  input scan node ids: 4
|  |  estimated serialized size: 101.25KB
|  |  estimated serialized size per node: 101.25KB
|  |  cumulative processing cost: 14808
|  |  cache read processing cost: 1148
|  |  cache write processing cost: 279
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K cost=0
|  |  in pipelines: 04(GETNEXT)
|  |
|  04:SCAN HDFS [tpcds_partitioned_parquet_snap.time_dim]
|     HDFS partitions=1/1 files=1 size=1.31MB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     stored statistics:
|       table: rows=86.40K size=1.31MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=86.40K
|     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=3 row-size=8B cardinality=8.64K cost=14808
|     in pipelines: 04(GETNEXT)
|
01:SCAN HDFS [tpcds_partitioned_parquet_snap.web_sales]
   HDFS partitions=1824/1824 files=1824 size=145.75GB
   deterministic scan range assignment: true
   schedule scan ranges oldest to newest: true
   runtime filters: RF007[min_max] -> ws_sold_time_sk, RF005[min_max] -> ws_ship_mode_sk, RF001[min_max] -> ws_warehouse_sk, RF006[bloom] -> ws_sold_time_sk, RF004[bloom] -> ws_ship_mode_sk, RF002[bloom] -> ws_sold_date_sk, RF000[bloom] -> ws_warehouse_sk
   stored statistics:
     table: rows=2.16G size=145.75GB
     partitions: 1824/1824 rows=2.16G
     columns: all
   extrapolated-rows=disabled max-scan-range-rows=3.37M est-scan-range=374(filtered from 1824)
   mem-estimate=16.00MB mem-reservation=128.00KB thread-reservation=0
   tuple-ids=0 row-size=28B cardinality=44.04M(filtered from 2.16G) cost=178095043
   in pipelines: 01(GETNEXT)
---- DISTRIBUTEDPLAN
Max Per-Host Resource Reservation: Memory=522.83MB Threads=33
Per-Host Resource Estimates: Memory=2.44GB
F14:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=4.30MB mem-reservation=4.00MB thread-reservation=1
|  max-parallelism=1 segment-costs=[2009] cpu-comparison-result=104 [max(1 (self) vs 104 (sum children))]
PLAN-ROOT SINK
|  output exprs: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`, sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / w_warehouse_sq_ft), sum(feb_sales / w_warehouse_sq_ft), sum(mar_sales / w_warehouse_sq_ft), sum(apr_sales / w_warehouse_sq_ft), sum(may_sales / w_warehouse_sq_ft), sum(jun_sales / w_warehouse_sq_ft), sum(jul_sales / w_warehouse_sq_ft), sum(aug_sales / w_warehouse_sq_ft), sum(sep_sales / w_warehouse_sq_ft), sum(oct_sales / w_warehouse_sq_ft), sum(nov_sales / w_warehouse_sq_ft), sum(dec_sales / w_warehouse_sq_ft), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0 cost=1936
|
37:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: w_warehouse_name ASC
|  limit: 100
|  mem-estimate=310.39KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=711B cardinality=44 cost=73
|  in pipelines: 22(GETNEXT)
|
F13:PLAN FRAGMENT [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)] hosts=10 instances=10 (adjusted from 120)
Per-Instance Resources: mem-estimate=11.80MB mem-reservation=1.94MB thread-reservation=1
max-parallelism=10 segment-costs=[515, 135, 833] cpu-comparison-result=104 [max(10 (self) vs 104 (sum children))]
22:TOP-N [LIMIT=100]
|  order by: w_warehouse_name ASC
|  mem-estimate=30.56KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=711B cardinality=44 cost=135
|  in pipelines: 22(GETNEXT), 36(OPEN)
|
36:AGGREGATE [FINALIZE]
|  output: sum:merge(jan_sales), sum:merge(feb_sales), sum:merge(mar_sales), sum:merge(apr_sales), sum:merge(may_sales), sum:merge(jun_sales), sum:merge(jul_sales), sum:merge(aug_sales), sum:merge(sep_sales), sum:merge(oct_sales), sum:merge(nov_sales), sum:merge(dec_sales), sum:merge(jan_sales / w_warehouse_sq_ft), sum:merge(feb_sales / w_warehouse_sq_ft), sum:merge(mar_sales / w_warehouse_sq_ft), sum:merge(apr_sales / w_warehouse_sq_ft), sum:merge(may_sales / w_warehouse_sq_ft), sum:merge(jun_sales / w_warehouse_sq_ft), sum:merge(jul_sales / w_warehouse_sq_ft), sum:merge(aug_sales / w_warehouse_sq_ft), sum:merge(sep_sales / w_warehouse_sq_ft), sum:merge(oct_sales / w_warehouse_sq_ft), sum:merge(nov_sales / w_warehouse_sq_ft), sum:merge(dec_sales / w_warehouse_sq_ft), sum:merge(jan_net), sum:merge(feb_net), sum:merge(mar_net), sum:merge(apr_net), sum:merge(may_net), sum:merge(jun_net), sum:merge(jul_net), sum:merge(aug_net), sum:merge(sep_net), sum:merge(oct_net), sum:merge(nov_net), sum:merge(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=367
|  in pipelines: 36(GETNEXT), 28(OPEN), 34(OPEN)
|
35:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)]
|  mem-estimate=1.80MB mem-reservation=0B thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=148
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
F12:PLAN FRAGMENT [RANDOM] hosts=10 instances=60 (adjusted from 120)
Per-Instance Resources: mem-estimate=78.02MB mem-reservation=3.94MB thread-reservation=1
max-parallelism=60 segment-costs=[14430, 14430, 440, 2038] cpu-comparison-result=104 [max(60 (self) vs 104 (sum children))]
21:AGGREGATE [STREAMING]
|  output: sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(feb_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(mar_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(apr_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(may_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jun_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jul_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(aug_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(sep_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(oct_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(nov_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(dec_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year
|  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=367
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
00:UNION
|  mem-estimate=0B mem-reservation=0B thread-reservation=0
|  tuple-ids=12 row-size=519B cardinality=44 cost=73
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
|--34:AGGREGATE [FINALIZE]
|  |  output: sum:merge(CASE WHEN d_moy = 1 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_net_paid * cs_quantity ELSE 0 END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=22 cost=7977
|  |  in pipelines: 34(GETNEXT), 11(OPEN)
|  |
|  33:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  |  mem-estimate=30.08MB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=2.64K cost=6453
|  |  in pipelines: 11(GETNEXT)
|  |
|  F06:PLAN FRAGMENT [RANDOM] hosts=10 instances=60 (adjusted from 120)
|  Per-Host Shared Resources: mem-estimate=4.00MB mem-reservation=4.00MB thread-reservation=0 runtime-filters-memory=4.00MB
|  Per-Instance Resources: mem-estimate=198.13MB mem-reservation=43.00MB thread-reservation=1
|  max-parallelism=60 segment-costs=[528384213, 87597] cpu-comparison-result=60 [max(60 (self) vs 44 (sum children))]
|  48:TUPLE CACHE
|  |  cache key: 3d6157ebb8fbc791e65fcb3b7a5032e3
|  |  input scan node ids: 11
|  |  estimated serialized size: 1.29MB
|  |  estimated serialized size per node: 131.80KB
|  |  cumulative processing cost: 528435146
|  |  cache read processing cost: 350
|  |  cache write processing cost: 3644
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=2.64K cost=0
|  |  in pipelines: 11(GETNEXT)
|  |
|  20:AGGREGATE [STREAMING]
|  |  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=54.31MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=2.64K cost=26196534
|  |  in pipelines: 11(GETNEXT)
|  |
|  19:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=04
|  |  hash predicates: cs_warehouse_sk = w_warehouse_sk
|  |  fk/pk conjuncts: cs_warehouse_sk = w_warehouse_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10,8,7 row-size=194B cardinality=8.77M cost=3840685
|  |  in pipelines: 11(GETNEXT), 12(OPEN)
|  |
|  |--F19:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.64MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[42]
|  |  JOIN BUILD
|  |  |  join-table-id=04 plan-id=05 cohort-id=02
|  |  |  build expressions: w_warehouse_sk
|  |  |  runtime filters: RF008[bloom] <- w_warehouse_sk, RF009[min_max] <- w_warehouse_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=22
|  |  |
|  |  32:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=7 row-size=123B cardinality=22 cost=20
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  F10:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.50MB mem-reservation=4.05MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[27]
|  |  47:TUPLE CACHE
|  |  |  cache key: 4115b7332cee5a51ed8109df145f2c0c
|  |  |  input scan node ids: 12
|  |  |  estimated serialized size: 2.73KB
|  |  |  estimated serialized size per node: 2.73KB
|  |  |  cumulative processing cost: 20
|  |  |  cache read processing cost: 2
|  |  |  cache write processing cost: 7
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=7 row-size=123B cardinality=22 cost=0
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  12:SCAN HDFS [tpcds_partitioned_parquet_snap.warehouse, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=5.99KB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     stored statistics:
|  |       table: rows=22 size=5.99KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=22
|  |     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|  |     tuple-ids=7 row-size=123B cardinality=22 cost=20
|  |     in pipelines: 12(GETNEXT)
|  |
|  46:TUPLE CACHE
|  |  cache key: 71a587954aace44106c9264aff100ea4
|  |  input scan node ids: 11
|  |  estimated serialized size: 725.10MB
|  |  estimated serialized size per node: 72.51MB
|  |  cumulative processing cost: 498397858
|  |  cache read processing cost: 1166157
|  |  cache write processing cost: 2052884
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=6,9,10,8 row-size=71B cardinality=8.77M cost=0
|  |  in pipelines: 11(GETNEXT)
|  |
|  18:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=05
|  |  hash predicates: cs_sold_date_sk = d_date_sk
|  |  fk/pk conjuncts: cs_sold_date_sk = d_date_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10,8 row-size=71B cardinality=8.77M cost=12638367
|  |  in pipelines: 11(GETNEXT), 13(OPEN)
|  |
|  |--F20:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.64MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[863]
|  |  JOIN BUILD
|  |  |  join-table-id=05 plan-id=06 cohort-id=02
|  |  |  build expressions: d_date_sk
|  |  |  runtime filters: RF010[bloom] <- d_date_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=373
|  |  |
|  |  31:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373 cost=490
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  F09:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.06MB mem-reservation=4.50MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[14695]
|  |  45:TUPLE CACHE
|  |  |  cache key: ff35fce9572f532b9e35ce78520c7cb4
|  |  |  input scan node ids: 13
|  |  |  estimated serialized size: 5.83KB
|  |  |  estimated serialized size per node: 5.83KB
|  |  |  cumulative processing cost: 14675
|  |  |  cache read processing cost: 49
|  |  |  cache write processing cost: 16
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373 cost=0
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  13:SCAN HDFS [tpcds_partitioned_parquet_snap.date_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.17MB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: d_year = CAST(2002 AS INT)
|  |     stored statistics:
|  |       table: rows=73.05K size=2.17MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=73.05K
|  |     parquet statistics predicates: d_year = CAST(2002 AS INT)
|  |     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|  |     tuple-ids=8 row-size=12B cardinality=373 cost=14675
|  |     in pipelines: 13(GETNEXT)
|  |
|  17:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=06
|  |  hash predicates: cs_ship_mode_sk = sm_ship_mode_sk
|  |  fk/pk conjuncts: cs_ship_mode_sk = sm_ship_mode_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10 row-size=59B cardinality=43.07M cost=30312047
|  |  in pipelines: 11(GETNEXT), 15(OPEN)
|  |
|  |--F21:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.64MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[2]
|  |  JOIN BUILD
|  |  |  join-table-id=06 plan-id=07 cohort-id=02
|  |  |  build expressions: sm_ship_mode_sk
|  |  |  runtime filters: RF012[bloom] <- sm_ship_mode_sk, RF013[min_max] <- sm_ship_mode_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=2
|  |  |
|  |  30:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2 cost=0
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  F08:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.10MB mem-reservation=4.02MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[3]
|  |  44:TUPLE CACHE
|  |  |  cache key: 0f281874dea17d94d140bfdf761e9b42
|  |  |  input scan node ids: 15
|  |  |  estimated serialized size: 53B
|  |  |  estimated serialized size per node: 53B
|  |  |  cumulative processing cost: 3
|  |  |  cache read processing cost: 0
|  |  |  cache write processing cost: 0
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2 cost=0
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  15:SCAN HDFS [tpcds_partitioned_parquet_snap.ship_mode, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.68KB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     stored statistics:
|  |       table: rows=20 size=2.68KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=20
|  |     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|  |     tuple-ids=10 row-size=23B cardinality=2 cost=3
|  |     in pipelines: 15(GETNEXT)
|  |
|  16:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=07
|  |  hash predicates: cs_sold_time_sk = t_time_sk
|  |  fk/pk conjuncts: cs_sold_time_sk = t_time_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9 row-size=36B cardinality=87.75M(filtered from 430.74M) cost=100556559
|  |  in pipelines: 11(GETNEXT), 14(OPEN)
|  |
|  |--F22:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.70MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[20120]
|  |  JOIN BUILD
|  |  |  join-table-id=07 plan-id=08 cohort-id=02
|  |  |  build expressions: t_time_sk
|  |  |  runtime filters: RF014[bloom] <- t_time_sk, RF015[min_max] <- t_time_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=8640
|  |  |
|  |  29:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K cost=11480
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.05MB mem-reservation=5.00MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[15181]
|  |  43:TUPLE CACHE
|  |  |  cache key: e90f09625b2af2d467a2cbf45cee8ab4
|  |  |  input scan node ids: 14
|  |  |  estimated serialized size: 101.25KB
|  |  |  estimated serialized size per node: 101.25KB
|  |  |  cumulative processing cost: 14808
|  |  |  cache read processing cost: 1148
|  |  |  cache write processing cost: 279
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K cost=0
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  14:SCAN HDFS [tpcds_partitioned_parquet_snap.time_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=1.31MB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     stored statistics:
|  |       table: rows=86.40K size=1.31MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=86.40K
|  |     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|  |     tuple-ids=9 row-size=8B cardinality=8.64K cost=14808
|  |     in pipelines: 14(GETNEXT)
|  |
|  11:SCAN HDFS [tpcds_partitioned_parquet_snap.catalog_sales, RANDOM]
|     HDFS partitions=1831/1831 files=1831 size=280.96GB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     runtime filters: RF015[min_max] -> cs_sold_time_sk, RF013[min_max] -> cs_ship_mode_sk, RF009[min_max] -> cs_warehouse_sk, RF014[bloom] -> cs_sold_time_sk, RF012[bloom] -> cs_ship_mode_sk, RF010[bloom] -> cs_sold_date_sk, RF008[bloom] -> cs_warehouse_sk
|     stored statistics:
|       table: rows=4.32G size=280.96GB
|       partitions: 1831/1831 rows=4.32G
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=21.52M est-scan-range=374(filtered from 1831)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=6 row-size=28B cardinality=87.75M(filtered from 4.32G) cost=354840021
|     in pipelines: 11(GETNEXT)
|
28:AGGREGATE [FINALIZE]
|  output: sum:merge(CASE WHEN d_moy = 1 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=22 cost=7977
|  in pipelines: 28(GETNEXT), 01(OPEN)
|
27:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  mem-estimate=15.11MB mem-reservation=0B thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=2.64K cost=6453
|  in pipelines: 01(GETNEXT)
|
F00:PLAN FRAGMENT [RANDOM] hosts=10 instances=30 (adjusted from 120)
Per-Host Shared Resources: mem-estimate=4.00MB mem-reservation=4.00MB thread-reservation=0 runtime-filters-memory=4.00MB
Per-Instance Resources: mem-estimate=194.34MB mem-reservation=38.12MB thread-reservation=1
max-parallelism=30 segment-costs=[265017298, 87597] cpu-comparison-result=44 [max(30 (self) vs 44 (sum children))]
42:TUPLE CACHE
|  cache key: e37b8b0175a46bef073cafbea7b6738e
|  input scan node ids: 1
|  estimated serialized size: 1.29MB
|  estimated serialized size per node: 131.80KB
|  cumulative processing cost: 265068231
|  cache read processing cost: 350
|  cache write processing cost: 3644
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=2.64K cost=0
|  in pipelines: 01(GETNEXT)
|
10:AGGREGATE [STREAMING]
|  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=54.52MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=2.64K cost=13154056
|  in pipelines: 01(GETNEXT)
|
09:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=00
|  hash predicates: ws_warehouse_sk = w_warehouse_sk
|  fk/pk conjuncts: ws_warehouse_sk = w_warehouse_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4,2,1 row-size=194B cardinality=4.40M cost=1927649
|  in pipelines: 01(GETNEXT), 02(OPEN)
|
|--F15:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.83MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[42]
|  JOIN BUILD
|  |  join-table-id=00 plan-id=01 cohort-id=01
|  |  build expressions: w_warehouse_sk
|  |  runtime filters: RF000[bloom] <- w_warehouse_sk, RF001[min_max] <- w_warehouse_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=22
|  |
|  26:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=1 row-size=123B cardinality=22 cost=20
|  |  in pipelines: 02(GETNEXT)
|  |
|  F04:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.50MB mem-reservation=4.05MB thread-reservation=1
|  max-parallelism=1 segment-costs=[27]
|  41:TUPLE CACHE
|  |  cache key: 4115b7332cee5a51ed8109df145f2c0c
|  |  input scan node ids: 2
|  |  estimated serialized size: 2.73KB
|  |  estimated serialized size per node: 2.73KB
|  |  cumulative processing cost: 20
|  |  cache read processing cost: 2
|  |  cache write processing cost: 7
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=1 row-size=123B cardinality=22 cost=0
|  |  in pipelines: 02(GETNEXT)
|  |
|  02:SCAN HDFS [tpcds_partitioned_parquet_snap.warehouse, RANDOM]
|     HDFS partitions=1/1 files=1 size=5.99KB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     stored statistics:
|       table: rows=22 size=5.99KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=22
|     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|     tuple-ids=1 row-size=123B cardinality=22 cost=20
|     in pipelines: 02(GETNEXT)
|
08:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=01
|  hash predicates: ws_sold_date_sk = d_date_sk
|  fk/pk conjuncts: ws_sold_date_sk = d_date_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4,2 row-size=71B cardinality=4.40M cost=6322026
|  in pipelines: 01(GETNEXT), 03(OPEN)
|
|--F16:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.83MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[863]
|  JOIN BUILD
|  |  join-table-id=01 plan-id=02 cohort-id=01
|  |  build expressions: d_date_sk
|  |  runtime filters: RF002[bloom] <- d_date_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=373
|  |
|  25:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373 cost=490
|  |  in pipelines: 03(GETNEXT)
|  |
|  F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.06MB mem-reservation=4.50MB thread-reservation=1
|  max-parallelism=1 segment-costs=[14695]
|  40:TUPLE CACHE
|  |  cache key: ff35fce9572f532b9e35ce78520c7cb4
|  |  input scan node ids: 3
|  |  estimated serialized size: 5.83KB
|  |  estimated serialized size per node: 5.83KB
|  |  cumulative processing cost: 14675
|  |  cache read processing cost: 49
|  |  cache write processing cost: 16
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373 cost=0
|  |  in pipelines: 03(GETNEXT)
|  |
|  03:SCAN HDFS [tpcds_partitioned_parquet_snap.date_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.17MB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: d_year = CAST(2002 AS INT)
|     stored statistics:
|       table: rows=73.05K size=2.17MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=73.05K
|     parquet statistics predicates: d_year = CAST(2002 AS INT)
|     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|     tuple-ids=2 row-size=12B cardinality=373 cost=14675
|     in pipelines: 03(GETNEXT)
|
07:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=02
|  hash predicates: ws_ship_mode_sk = sm_ship_mode_sk
|  fk/pk conjuncts: ws_ship_mode_sk = sm_ship_mode_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4 row-size=59B cardinality=21.54M cost=15198711
|  in pipelines: 01(GETNEXT), 05(OPEN)
|
|--F17:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.83MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[2]
|  JOIN BUILD
|  |  join-table-id=02 plan-id=03 cohort-id=01
|  |  build expressions: sm_ship_mode_sk
|  |  runtime filters: RF004[bloom] <- sm_ship_mode_sk, RF005[min_max] <- sm_ship_mode_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=2
|  |
|  24:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2 cost=0
|  |  in pipelines: 05(GETNEXT)
|  |
|  F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.10MB mem-reservation=4.02MB thread-reservation=1
|  max-parallelism=1 segment-costs=[3]
|  39:TUPLE CACHE
|  |  cache key: 0f281874dea17d94d140bfdf761e9b42
|  |  input scan node ids: 5
|  |  estimated serialized size: 53B
|  |  estimated serialized size per node: 53B
|  |  cumulative processing cost: 3
|  |  cache read processing cost: 0
|  |  cache write processing cost: 0
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2 cost=0
|  |  in pipelines: 05(GETNEXT)
|  |
|  05:SCAN HDFS [tpcds_partitioned_parquet_snap.ship_mode, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.68KB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     stored statistics:
|       table: rows=20 size=2.68KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=20
|     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|     tuple-ids=4 row-size=23B cardinality=2 cost=3
|     in pipelines: 05(GETNEXT)
|
06:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=03
|  hash predicates: ws_sold_time_sk = t_time_sk
|  fk/pk conjuncts: ws_sold_time_sk = t_time_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3 row-size=36B cardinality=44.04M(filtered from 215.36M) cost=50319813
|  in pipelines: 01(GETNEXT), 04(OPEN)
|
|--F18:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.89MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[20120]
|  JOIN BUILD
|  |  join-table-id=03 plan-id=04 cohort-id=01
|  |  build expressions: t_time_sk
|  |  runtime filters: RF006[bloom] <- t_time_sk, RF007[min_max] <- t_time_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=8640
|  |
|  23:EXCHANGE [BROADCAST]
|  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K cost=11480
|  |  in pipelines: 04(GETNEXT)
|  |
|  F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.05MB mem-reservation=5.00MB thread-reservation=1
|  max-parallelism=1 segment-costs=[15181]
|  38:TUPLE CACHE
|  |  cache key: e90f09625b2af2d467a2cbf45cee8ab4
|  |  input scan node ids: 4
|  |  estimated serialized size: 101.25KB
|  |  estimated serialized size per node: 101.25KB
|  |  cumulative processing cost: 14808
|  |  cache read processing cost: 1148
|  |  cache write processing cost: 279
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K cost=0
|  |  in pipelines: 04(GETNEXT)
|  |
|  04:SCAN HDFS [tpcds_partitioned_parquet_snap.time_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=1.31MB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     stored statistics:
|       table: rows=86.40K size=1.31MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=86.40K
|     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=3 row-size=8B cardinality=8.64K cost=14808
|     in pipelines: 04(GETNEXT)
|
01:SCAN HDFS [tpcds_partitioned_parquet_snap.web_sales, RANDOM]
   HDFS partitions=1824/1824 files=1824 size=145.75GB
   deterministic scan range assignment: true
   schedule scan ranges oldest to newest: true
   runtime filters: RF007[min_max] -> ws_sold_time_sk, RF005[min_max] -> ws_ship_mode_sk, RF001[min_max] -> ws_warehouse_sk, RF006[bloom] -> ws_sold_time_sk, RF004[bloom] -> ws_ship_mode_sk, RF002[bloom] -> ws_sold_date_sk, RF000[bloom] -> ws_warehouse_sk
   stored statistics:
     table: rows=2.16G size=145.75GB
     partitions: 1824/1824 rows=2.16G
     columns: all
   extrapolated-rows=disabled max-scan-range-rows=3.37M est-scan-range=374(filtered from 1824)
   mem-estimate=16.00MB mem-reservation=128.00KB thread-reservation=0
   tuple-ids=0 row-size=28B cardinality=44.04M(filtered from 2.16G) cost=178095043
   in pipelines: 01(GETNEXT)
---- PARALLELPLANS
Max Per-Host Resource Reservation: Memory=522.83MB Threads=33
Per-Host Resource Estimates: Memory=2.44GB
F14:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=4.30MB mem-reservation=4.00MB thread-reservation=1
|  max-parallelism=1 segment-costs=[2009] cpu-comparison-result=104 [max(1 (self) vs 104 (sum children))]
PLAN-ROOT SINK
|  output exprs: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`, sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / w_warehouse_sq_ft), sum(feb_sales / w_warehouse_sq_ft), sum(mar_sales / w_warehouse_sq_ft), sum(apr_sales / w_warehouse_sq_ft), sum(may_sales / w_warehouse_sq_ft), sum(jun_sales / w_warehouse_sq_ft), sum(jul_sales / w_warehouse_sq_ft), sum(aug_sales / w_warehouse_sq_ft), sum(sep_sales / w_warehouse_sq_ft), sum(oct_sales / w_warehouse_sq_ft), sum(nov_sales / w_warehouse_sq_ft), sum(dec_sales / w_warehouse_sq_ft), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0 cost=1936
|
37:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: w_warehouse_name ASC
|  limit: 100
|  mem-estimate=310.39KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=711B cardinality=44 cost=73
|  in pipelines: 22(GETNEXT)
|
F13:PLAN FRAGMENT [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)] hosts=10 instances=10 (adjusted from 120)
Per-Instance Resources: mem-estimate=11.80MB mem-reservation=1.94MB thread-reservation=1
max-parallelism=10 segment-costs=[515, 135, 833] cpu-comparison-result=104 [max(10 (self) vs 104 (sum children))]
22:TOP-N [LIMIT=100]
|  order by: w_warehouse_name ASC
|  mem-estimate=30.56KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=711B cardinality=44 cost=135
|  in pipelines: 22(GETNEXT), 36(OPEN)
|
36:AGGREGATE [FINALIZE]
|  output: sum:merge(jan_sales), sum:merge(feb_sales), sum:merge(mar_sales), sum:merge(apr_sales), sum:merge(may_sales), sum:merge(jun_sales), sum:merge(jul_sales), sum:merge(aug_sales), sum:merge(sep_sales), sum:merge(oct_sales), sum:merge(nov_sales), sum:merge(dec_sales), sum:merge(jan_sales / w_warehouse_sq_ft), sum:merge(feb_sales / w_warehouse_sq_ft), sum:merge(mar_sales / w_warehouse_sq_ft), sum:merge(apr_sales / w_warehouse_sq_ft), sum:merge(may_sales / w_warehouse_sq_ft), sum:merge(jun_sales / w_warehouse_sq_ft), sum:merge(jul_sales / w_warehouse_sq_ft), sum:merge(aug_sales / w_warehouse_sq_ft), sum:merge(sep_sales / w_warehouse_sq_ft), sum:merge(oct_sales / w_warehouse_sq_ft), sum:merge(nov_sales / w_warehouse_sq_ft), sum:merge(dec_sales / w_warehouse_sq_ft), sum:merge(jan_net), sum:merge(feb_net), sum:merge(mar_net), sum:merge(apr_net), sum:merge(may_net), sum:merge(jun_net), sum:merge(jul_net), sum:merge(aug_net), sum:merge(sep_net), sum:merge(oct_net), sum:merge(nov_net), sum:merge(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=367
|  in pipelines: 36(GETNEXT), 28(OPEN), 34(OPEN)
|
35:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)]
|  mem-estimate=1.80MB mem-reservation=0B thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=148
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
F12:PLAN FRAGMENT [RANDOM] hosts=10 instances=60 (adjusted from 120)
Per-Instance Resources: mem-estimate=78.02MB mem-reservation=3.94MB thread-reservation=1
max-parallelism=60 segment-costs=[14430, 14430, 440, 2038] cpu-comparison-result=104 [max(60 (self) vs 104 (sum children))]
21:AGGREGATE [STREAMING]
|  output: sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(feb_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(mar_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(apr_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(may_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jun_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jul_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(aug_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(sep_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(oct_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(nov_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(dec_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year
|  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=711B cardinality=44 cost=367
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
00:UNION
|  mem-estimate=0B mem-reservation=0B thread-reservation=0
|  tuple-ids=12 row-size=519B cardinality=44 cost=73
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
|--34:AGGREGATE [FINALIZE]
|  |  output: sum:merge(CASE WHEN d_moy = 1 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_net_paid * cs_quantity ELSE 0 END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=22 cost=7977
|  |  in pipelines: 34(GETNEXT), 11(OPEN)
|  |
|  33:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  |  mem-estimate=30.08MB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=2.64K cost=6453
|  |  in pipelines: 11(GETNEXT)
|  |
|  F06:PLAN FRAGMENT [RANDOM] hosts=10 instances=60 (adjusted from 120)
|  Per-Host Shared Resources: mem-estimate=4.00MB mem-reservation=4.00MB thread-reservation=0 runtime-filters-memory=4.00MB
|  Per-Instance Resources: mem-estimate=198.13MB mem-reservation=43.00MB thread-reservation=1
|  max-parallelism=60 segment-costs=[528384213, 87597] cpu-comparison-result=60 [max(60 (self) vs 44 (sum children))]
|  48:TUPLE CACHE
|  |  cache key: 3d6157ebb8fbc791e65fcb3b7a5032e3
|  |  input scan node ids: 11
|  |  estimated serialized size: 1.29MB
|  |  estimated serialized size per node: 131.80KB
|  |  cumulative processing cost: 528435146
|  |  cache read processing cost: 350
|  |  cache write processing cost: 3644
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=2.64K cost=0
|  |  in pipelines: 11(GETNEXT)
|  |
|  20:AGGREGATE [STREAMING]
|  |  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=54.31MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=11 row-size=507B cardinality=2.64K cost=26196534
|  |  in pipelines: 11(GETNEXT)
|  |
|  19:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=04
|  |  hash predicates: cs_warehouse_sk = w_warehouse_sk
|  |  fk/pk conjuncts: cs_warehouse_sk = w_warehouse_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10,8,7 row-size=194B cardinality=8.77M cost=3840685
|  |  in pipelines: 11(GETNEXT), 12(OPEN)
|  |
|  |--F19:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.64MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[42]
|  |  JOIN BUILD
|  |  |  join-table-id=04 plan-id=05 cohort-id=02
|  |  |  build expressions: w_warehouse_sk
|  |  |  runtime filters: RF008[bloom] <- w_warehouse_sk, RF009[min_max] <- w_warehouse_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=22
|  |  |
|  |  32:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=7 row-size=123B cardinality=22 cost=20
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  F10:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.50MB mem-reservation=4.05MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[27]
|  |  47:TUPLE CACHE
|  |  |  cache key: 4115b7332cee5a51ed8109df145f2c0c
|  |  |  input scan node ids: 12
|  |  |  estimated serialized size: 2.73KB
|  |  |  estimated serialized size per node: 2.73KB
|  |  |  cumulative processing cost: 20
|  |  |  cache read processing cost: 2
|  |  |  cache write processing cost: 7
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=7 row-size=123B cardinality=22 cost=0
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  12:SCAN HDFS [tpcds_partitioned_parquet_snap.warehouse, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=5.99KB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     stored statistics:
|  |       table: rows=22 size=5.99KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=22
|  |     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|  |     tuple-ids=7 row-size=123B cardinality=22 cost=20
|  |     in pipelines: 12(GETNEXT)
|  |
|  46:TUPLE CACHE
|  |  cache key: 71a587954aace44106c9264aff100ea4
|  |  input scan node ids: 11
|  |  estimated serialized size: 725.10MB
|  |  estimated serialized size per node: 72.51MB
|  |  cumulative processing cost: 498397858
|  |  cache read processing cost: 1166157
|  |  cache write processing cost: 2052884
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=6,9,10,8 row-size=71B cardinality=8.77M cost=0
|  |  in pipelines: 11(GETNEXT)
|  |
|  18:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=05
|  |  hash predicates: cs_sold_date_sk = d_date_sk
|  |  fk/pk conjuncts: cs_sold_date_sk = d_date_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10,8 row-size=71B cardinality=8.77M cost=12638367
|  |  in pipelines: 11(GETNEXT), 13(OPEN)
|  |
|  |--F20:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.64MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[863]
|  |  JOIN BUILD
|  |  |  join-table-id=05 plan-id=06 cohort-id=02
|  |  |  build expressions: d_date_sk
|  |  |  runtime filters: RF010[bloom] <- d_date_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=373
|  |  |
|  |  31:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373 cost=490
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  F09:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.06MB mem-reservation=4.50MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[14695]
|  |  45:TUPLE CACHE
|  |  |  cache key: ff35fce9572f532b9e35ce78520c7cb4
|  |  |  input scan node ids: 13
|  |  |  estimated serialized size: 5.83KB
|  |  |  estimated serialized size per node: 5.83KB
|  |  |  cumulative processing cost: 14675
|  |  |  cache read processing cost: 49
|  |  |  cache write processing cost: 16
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373 cost=0
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  13:SCAN HDFS [tpcds_partitioned_parquet_snap.date_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.17MB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: d_year = CAST(2002 AS INT)
|  |     stored statistics:
|  |       table: rows=73.05K size=2.17MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=73.05K
|  |     parquet statistics predicates: d_year = CAST(2002 AS INT)
|  |     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|  |     tuple-ids=8 row-size=12B cardinality=373 cost=14675
|  |     in pipelines: 13(GETNEXT)
|  |
|  17:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=06
|  |  hash predicates: cs_ship_mode_sk = sm_ship_mode_sk
|  |  fk/pk conjuncts: cs_ship_mode_sk = sm_ship_mode_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9,10 row-size=59B cardinality=43.07M cost=30312047
|  |  in pipelines: 11(GETNEXT), 15(OPEN)
|  |
|  |--F21:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.64MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[2]
|  |  JOIN BUILD
|  |  |  join-table-id=06 plan-id=07 cohort-id=02
|  |  |  build expressions: sm_ship_mode_sk
|  |  |  runtime filters: RF012[bloom] <- sm_ship_mode_sk, RF013[min_max] <- sm_ship_mode_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=2
|  |  |
|  |  30:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2 cost=0
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  F08:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.10MB mem-reservation=4.02MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[3]
|  |  44:TUPLE CACHE
|  |  |  cache key: 0f281874dea17d94d140bfdf761e9b42
|  |  |  input scan node ids: 15
|  |  |  estimated serialized size: 53B
|  |  |  estimated serialized size per node: 53B
|  |  |  cumulative processing cost: 3
|  |  |  cache read processing cost: 0
|  |  |  cache write processing cost: 0
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2 cost=0
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  15:SCAN HDFS [tpcds_partitioned_parquet_snap.ship_mode, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.68KB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     stored statistics:
|  |       table: rows=20 size=2.68KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=20
|  |     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|  |     tuple-ids=10 row-size=23B cardinality=2 cost=3
|  |     in pipelines: 15(GETNEXT)
|  |
|  16:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=07
|  |  hash predicates: cs_sold_time_sk = t_time_sk
|  |  fk/pk conjuncts: cs_sold_time_sk = t_time_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,9 row-size=36B cardinality=87.75M(filtered from 430.74M) cost=100556559
|  |  in pipelines: 11(GETNEXT), 14(OPEN)
|  |
|  |--F22:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  |  Per-Instance Resources: mem-estimate=12.70MB mem-reservation=12.62MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  |  max-parallelism=10 segment-costs=[20120]
|  |  JOIN BUILD
|  |  |  join-table-id=07 plan-id=08 cohort-id=02
|  |  |  build expressions: t_time_sk
|  |  |  runtime filters: RF014[bloom] <- t_time_sk, RF015[min_max] <- t_time_sk
|  |  |  mem-estimate=11.62MB mem-reservation=11.62MB spill-buffer=64.00KB thread-reservation=0 cost=8640
|  |  |
|  |  29:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K cost=11480
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=20.05MB mem-reservation=5.00MB thread-reservation=1
|  |  max-parallelism=1 segment-costs=[15181]
|  |  43:TUPLE CACHE
|  |  |  cache key: e90f09625b2af2d467a2cbf45cee8ab4
|  |  |  input scan node ids: 14
|  |  |  estimated serialized size: 101.25KB
|  |  |  estimated serialized size per node: 101.25KB
|  |  |  cumulative processing cost: 14808
|  |  |  cache read processing cost: 1148
|  |  |  cache write processing cost: 279
|  |  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K cost=0
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  14:SCAN HDFS [tpcds_partitioned_parquet_snap.time_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=1.31MB
|  |     deterministic scan range assignment: true
|  |     schedule scan ranges oldest to newest: true
|  |     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     stored statistics:
|  |       table: rows=86.40K size=1.31MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=86.40K
|  |     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|  |     tuple-ids=9 row-size=8B cardinality=8.64K cost=14808
|  |     in pipelines: 14(GETNEXT)
|  |
|  11:SCAN HDFS [tpcds_partitioned_parquet_snap.catalog_sales, RANDOM]
|     HDFS partitions=1831/1831 files=1831 size=280.96GB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     runtime filters: RF015[min_max] -> cs_sold_time_sk, RF013[min_max] -> cs_ship_mode_sk, RF009[min_max] -> cs_warehouse_sk, RF014[bloom] -> cs_sold_time_sk, RF012[bloom] -> cs_ship_mode_sk, RF010[bloom] -> cs_sold_date_sk, RF008[bloom] -> cs_warehouse_sk
|     stored statistics:
|       table: rows=4.32G size=280.96GB
|       partitions: 1831/1831 rows=4.32G
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=21.52M est-scan-range=374(filtered from 1831)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=6 row-size=28B cardinality=87.75M(filtered from 4.32G) cost=354840021
|     in pipelines: 11(GETNEXT)
|
28:AGGREGATE [FINALIZE]
|  output: sum:merge(CASE WHEN d_moy = 1 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=22 cost=7977
|  in pipelines: 28(GETNEXT), 01(OPEN)
|
27:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  mem-estimate=15.11MB mem-reservation=0B thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=2.64K cost=6453
|  in pipelines: 01(GETNEXT)
|
F00:PLAN FRAGMENT [RANDOM] hosts=10 instances=30 (adjusted from 120)
Per-Host Shared Resources: mem-estimate=4.00MB mem-reservation=4.00MB thread-reservation=0 runtime-filters-memory=4.00MB
Per-Instance Resources: mem-estimate=194.34MB mem-reservation=38.12MB thread-reservation=1
max-parallelism=30 segment-costs=[265017298, 87597] cpu-comparison-result=44 [max(30 (self) vs 44 (sum children))]
42:TUPLE CACHE
|  cache key: e37b8b0175a46bef073cafbea7b6738e
|  input scan node ids: 1
|  estimated serialized size: 1.29MB
|  estimated serialized size per node: 131.80KB
|  cumulative processing cost: 265068231
|  cache read processing cost: 350
|  cache write processing cost: 3644
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=2.64K cost=0
|  in pipelines: 01(GETNEXT)
|
10:AGGREGATE [STREAMING]
|  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=54.52MB mem-reservation=34.00MB spill-buffer=2.00MB thread-reservation=0
|  tuple-ids=5 row-size=507B cardinality=2.64K cost=13154056
|  in pipelines: 01(GETNEXT)
|
09:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=00
|  hash predicates: ws_warehouse_sk = w_warehouse_sk
|  fk/pk conjuncts: ws_warehouse_sk = w_warehouse_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4,2,1 row-size=194B cardinality=4.40M cost=1927649
|  in pipelines: 01(GETNEXT), 02(OPEN)
|
|--F15:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.83MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[42]
|  JOIN BUILD
|  |  join-table-id=00 plan-id=01 cohort-id=01
|  |  build expressions: w_warehouse_sk
|  |  runtime filters: RF000[bloom] <- w_warehouse_sk, RF001[min_max] <- w_warehouse_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=22
|  |
|  26:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=1 row-size=123B cardinality=22 cost=20
|  |  in pipelines: 02(GETNEXT)
|  |
|  F04:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.50MB mem-reservation=4.05MB thread-reservation=1
|  max-parallelism=1 segment-costs=[27]
|  41:TUPLE CACHE
|  |  cache key: 4115b7332cee5a51ed8109df145f2c0c
|  |  input scan node ids: 2
|  |  estimated serialized size: 2.73KB
|  |  estimated serialized size per node: 2.73KB
|  |  cumulative processing cost: 20
|  |  cache read processing cost: 2
|  |  cache write processing cost: 7
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=1 row-size=123B cardinality=22 cost=0
|  |  in pipelines: 02(GETNEXT)
|  |
|  02:SCAN HDFS [tpcds_partitioned_parquet_snap.warehouse, RANDOM]
|     HDFS partitions=1/1 files=1 size=5.99KB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     stored statistics:
|       table: rows=22 size=5.99KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=22
|     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|     tuple-ids=1 row-size=123B cardinality=22 cost=20
|     in pipelines: 02(GETNEXT)
|
08:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=01
|  hash predicates: ws_sold_date_sk = d_date_sk
|  fk/pk conjuncts: ws_sold_date_sk = d_date_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4,2 row-size=71B cardinality=4.40M cost=6322026
|  in pipelines: 01(GETNEXT), 03(OPEN)
|
|--F16:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.83MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[863]
|  JOIN BUILD
|  |  join-table-id=01 plan-id=02 cohort-id=01
|  |  build expressions: d_date_sk
|  |  runtime filters: RF002[bloom] <- d_date_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=373
|  |
|  25:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373 cost=490
|  |  in pipelines: 03(GETNEXT)
|  |
|  F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.06MB mem-reservation=4.50MB thread-reservation=1
|  max-parallelism=1 segment-costs=[14695]
|  40:TUPLE CACHE
|  |  cache key: ff35fce9572f532b9e35ce78520c7cb4
|  |  input scan node ids: 3
|  |  estimated serialized size: 5.83KB
|  |  estimated serialized size per node: 5.83KB
|  |  cumulative processing cost: 14675
|  |  cache read processing cost: 49
|  |  cache write processing cost: 16
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373 cost=0
|  |  in pipelines: 03(GETNEXT)
|  |
|  03:SCAN HDFS [tpcds_partitioned_parquet_snap.date_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.17MB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: d_year = CAST(2002 AS INT)
|     stored statistics:
|       table: rows=73.05K size=2.17MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=73.05K
|     parquet statistics predicates: d_year = CAST(2002 AS INT)
|     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|     tuple-ids=2 row-size=12B cardinality=373 cost=14675
|     in pipelines: 03(GETNEXT)
|
07:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=02
|  hash predicates: ws_ship_mode_sk = sm_ship_mode_sk
|  fk/pk conjuncts: ws_ship_mode_sk = sm_ship_mode_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3,4 row-size=59B cardinality=21.54M cost=15198711
|  in pipelines: 01(GETNEXT), 05(OPEN)
|
|--F17:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.83MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[2]
|  JOIN BUILD
|  |  join-table-id=02 plan-id=03 cohort-id=01
|  |  build expressions: sm_ship_mode_sk
|  |  runtime filters: RF004[bloom] <- sm_ship_mode_sk, RF005[min_max] <- sm_ship_mode_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=2
|  |
|  24:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2 cost=0
|  |  in pipelines: 05(GETNEXT)
|  |
|  F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.10MB mem-reservation=4.02MB thread-reservation=1
|  max-parallelism=1 segment-costs=[3]
|  39:TUPLE CACHE
|  |  cache key: 0f281874dea17d94d140bfdf761e9b42
|  |  input scan node ids: 5
|  |  estimated serialized size: 53B
|  |  estimated serialized size per node: 53B
|  |  cumulative processing cost: 3
|  |  cache read processing cost: 0
|  |  cache write processing cost: 0
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2 cost=0
|  |  in pipelines: 05(GETNEXT)
|  |
|  05:SCAN HDFS [tpcds_partitioned_parquet_snap.ship_mode, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.68KB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     stored statistics:
|       table: rows=20 size=2.68KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=20
|     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|     tuple-ids=4 row-size=23B cardinality=2 cost=3
|     in pipelines: 05(GETNEXT)
|
06:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=03
|  hash predicates: ws_sold_time_sk = t_time_sk
|  fk/pk conjuncts: ws_sold_time_sk = t_time_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,3 row-size=36B cardinality=44.04M(filtered from 215.36M) cost=50319813
|  in pipelines: 01(GETNEXT), 04(OPEN)
|
|--F18:PLAN FRAGMENT [RANDOM] hosts=10 instances=10
|  |  Per-Instance Resources: mem-estimate=6.89MB mem-reservation=6.81MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  max-parallelism=10 segment-costs=[20120]
|  JOIN BUILD
|  |  join-table-id=03 plan-id=04 cohort-id=01
|  |  build expressions: t_time_sk
|  |  runtime filters: RF006[bloom] <- t_time_sk, RF007[min_max] <- t_time_sk
|  |  mem-estimate=5.81MB mem-reservation=5.81MB spill-buffer=64.00KB thread-reservation=0 cost=8640
|  |
|  23:EXCHANGE [BROADCAST]
|  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K cost=11480
|  |  in pipelines: 04(GETNEXT)
|  |
|  F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=20.05MB mem-reservation=5.00MB thread-reservation=1
|  max-parallelism=1 segment-costs=[15181]
|  38:TUPLE CACHE
|  |  cache key: e90f09625b2af2d467a2cbf45cee8ab4
|  |  input scan node ids: 4
|  |  estimated serialized size: 101.25KB
|  |  estimated serialized size per node: 101.25KB
|  |  cumulative processing cost: 14808
|  |  cache read processing cost: 1148
|  |  cache write processing cost: 279
|  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K cost=0
|  |  in pipelines: 04(GETNEXT)
|  |
|  04:SCAN HDFS [tpcds_partitioned_parquet_snap.time_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=1.31MB
|     deterministic scan range assignment: true
|     schedule scan ranges oldest to newest: true
|     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     stored statistics:
|       table: rows=86.40K size=1.31MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=86.40K
|     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=3 row-size=8B cardinality=8.64K cost=14808
|     in pipelines: 04(GETNEXT)
|
01:SCAN HDFS [tpcds_partitioned_parquet_snap.web_sales, RANDOM]
   HDFS partitions=1824/1824 files=1824 size=145.75GB
   deterministic scan range assignment: true
   schedule scan ranges oldest to newest: true
   runtime filters: RF007[min_max] -> ws_sold_time_sk, RF005[min_max] -> ws_ship_mode_sk, RF001[min_max] -> ws_warehouse_sk, RF006[bloom] -> ws_sold_time_sk, RF004[bloom] -> ws_ship_mode_sk, RF002[bloom] -> ws_sold_date_sk, RF000[bloom] -> ws_warehouse_sk
   stored statistics:
     table: rows=2.16G size=145.75GB
     partitions: 1824/1824 rows=2.16G
     columns: all
   extrapolated-rows=disabled max-scan-range-rows=3.37M est-scan-range=374(filtered from 1824)
   mem-estimate=16.00MB mem-reservation=128.00KB thread-reservation=0
   tuple-ids=0 row-size=28B cardinality=44.04M(filtered from 2.16G) cost=178095043
   in pipelines: 01(GETNEXT)
====
