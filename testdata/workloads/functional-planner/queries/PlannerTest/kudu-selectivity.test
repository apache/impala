select * from functional_kudu.zipcode_incomes where id = '8600000US00601'
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=1.88MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     kudu predicates: id = '8600000US00601'
     mem-estimate=1.88MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=1
     in pipelines: 00(GETNEXT)
---- DISTRIBUTEDPLAN
F01:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=16.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  01:EXCHANGE [UNPARTITIONED]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=124B cardinality=1
     in pipelines: 00(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
Per-Host Resources: mem-estimate=1.88MB mem-reservation=0B thread-reservation=2
  DATASTREAM SINK [FRAGMENT=F01, EXCHANGE=01, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     kudu predicates: id = '8600000US00601'
     mem-estimate=1.88MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=1
     in pipelines: 00(GETNEXT)
====
# The cardinality from "zip = '2'" should dominate.
select * from functional_kudu.zipcode_incomes where id != '1' and zip = '2'
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=3.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     predicates: id != '1'
     kudu predicates: zip = '2'
     mem-estimate=3.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=1
     in pipelines: 00(GETNEXT)
---- DISTRIBUTEDPLAN
F01:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=16.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  01:EXCHANGE [UNPARTITIONED]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=124B cardinality=1
     in pipelines: 00(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
Per-Host Resources: mem-estimate=3.75MB mem-reservation=0B thread-reservation=2
  DATASTREAM SINK [FRAGMENT=F01, EXCHANGE=01, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     predicates: id != '1'
     kudu predicates: zip = '2'
     mem-estimate=3.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=1
     in pipelines: 00(GETNEXT)
====
select * from functional_kudu.zipcode_incomes where id > '1' and zip > '2'
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=3.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     kudu predicates: zip > '2', id > '1'
     mem-estimate=3.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=3.32K
     in pipelines: 00(GETNEXT)
---- DISTRIBUTEDPLAN
F01:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=517.93KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  01:EXCHANGE [UNPARTITIONED]
     mem-estimate=517.93KB mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=124B cardinality=3.32K
     in pipelines: 00(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
Per-Host Resources: mem-estimate=3.75MB mem-reservation=0B thread-reservation=2
  DATASTREAM SINK [FRAGMENT=F01, EXCHANGE=01, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     kudu predicates: zip > '2', id > '1'
     mem-estimate=3.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=3.32K
     in pipelines: 00(GETNEXT)
====
select * from functional_kudu.zipcode_incomes where id = '1' or id = '2' or zip = '3'
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=3.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     predicates: id IN ('1', '2') OR zip = '3'
     mem-estimate=3.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=3
     in pipelines: 00(GETNEXT)
---- DISTRIBUTEDPLAN
F01:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=16.00KB mem-reservation=0B thread-reservation=1
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.zipcode_incomes.id, functional_kudu.zipcode_incomes.zip, functional_kudu.zipcode_incomes.description1, functional_kudu.zipcode_incomes.description2, functional_kudu.zipcode_incomes.income
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  01:EXCHANGE [UNPARTITIONED]
     mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
     tuple-ids=0 row-size=124B cardinality=3
     in pipelines: 00(GETNEXT)

F00:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
Per-Host Resources: mem-estimate=3.75MB mem-reservation=0B thread-reservation=2
  DATASTREAM SINK [FRAGMENT=F01, EXCHANGE=01, UNPARTITIONED]
  |  mem-estimate=0B mem-reservation=0B thread-reservation=0
  00:SCAN KUDU [functional_kudu.zipcode_incomes]
     predicates: id IN ('1', '2') OR zip = '3'
     mem-estimate=3.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=124B cardinality=3
     in pipelines: 00(GETNEXT)
====
# Test alltypes in-list predicates.
select * from functional_kudu.alltypes where
-- predicates that can be pushed
tinyint_col in (1, 2) and
smallint_col in (false, 2) and
int_col in (true, 2) and
bigint_col in (1, 2) and
bool_col in (true) and
float_col in (0.0) and
double_col in (0.0) and
string_col in ("foo", cast("foo" as char(10))) and

-- predicates that cannot be pushed because the SlotRef is wrapped in a cast
tinyint_col in (1, 999) and
smallint_col in (99999, 2) and
int_col in (9999999999) and
bigint_col in (9999999999999999999) and
bool_col in (1) and
float_col in (cast('NaN' as float)) and
double_col in (cast('inf' as double)) and

-- 'NOT IN' and lists containing slotrefs cannot be pushed
string_col not in ("bar") and
id in (int_col)
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=9.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.alltypes.id, functional_kudu.alltypes.bool_col, functional_kudu.alltypes.tinyint_col, functional_kudu.alltypes.smallint_col, functional_kudu.alltypes.int_col, functional_kudu.alltypes.bigint_col, functional_kudu.alltypes.float_col, functional_kudu.alltypes.double_col, functional_kudu.alltypes.date_string_col, functional_kudu.alltypes.string_col, functional_kudu.alltypes.timestamp_col, functional_kudu.alltypes.year, functional_kudu.alltypes.month
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.alltypes]
     predicates: id IN (int_col), CAST(int_col AS BIGINT) IN (CAST(9999999999 AS BIGINT)), CAST(bigint_col AS DECIMAL(19,0)) IN (CAST(9999999999999999999 AS DECIMAL(19,0))), double_col IN (CAST('inf' AS DOUBLE)), float_col IN (CAST('NaN' AS FLOAT)), CAST(smallint_col AS INT) IN (CAST(99999 AS INT), CAST(2 AS INT)), CAST(tinyint_col AS SMALLINT) IN (CAST(1 AS SMALLINT), CAST(999 AS SMALLINT)), CAST(bool_col AS TINYINT) IN (CAST(1 AS TINYINT)), string_col NOT IN ('bar')
     kudu predicates: double_col IN (CAST(0 AS DOUBLE)), float_col IN (CAST(0 AS FLOAT)), bigint_col IN (CAST(1 AS BIGINT), CAST(2 AS BIGINT)), int_col IN (CAST(1 AS INT), CAST(2 AS INT)), smallint_col IN (CAST(0 AS SMALLINT), CAST(2 AS SMALLINT)), string_col IN ('foo', 'foo       '), tinyint_col IN (CAST(1 AS TINYINT), CAST(2 AS TINYINT)), bool_col IN (TRUE)
     mem-estimate=9.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=97B cardinality=6
     in pipelines: 00(GETNEXT)
====
# Test decimal in-list predicates.
select * from functional_kudu.decimal_tbl where d1 in (1234, 12345);
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=4.50MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.decimal_tbl.d1, functional_kudu.decimal_tbl.d2, functional_kudu.decimal_tbl.d3, functional_kudu.decimal_tbl.d4, functional_kudu.decimal_tbl.d5, functional_kudu.decimal_tbl.d6
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.decimal_tbl]
     kudu predicates: d1 IN (CAST(1234 AS DECIMAL(9,0)), CAST(12345 AS DECIMAL(9,0)))
     mem-estimate=4.50MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=56B cardinality=3
     in pipelines: 00(GETNEXT)
====
select * from functional_kudu.alltypes where
tinyint_col is not null and
smallint_col is null and
cast(date_string_col as tinyint) is null and
timestamp_col > (nanoseconds_add(cast('1987-05-19 00:00:00' as timestamp), 10)) and
timestamp_col < (seconds_add(cast('9999-12-31 24:59:59' as timestamp), 10))
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=9.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.alltypes.id, functional_kudu.alltypes.bool_col, functional_kudu.alltypes.tinyint_col, functional_kudu.alltypes.smallint_col, functional_kudu.alltypes.int_col, functional_kudu.alltypes.bigint_col, functional_kudu.alltypes.float_col, functional_kudu.alltypes.double_col, functional_kudu.alltypes.date_string_col, functional_kudu.alltypes.string_col, functional_kudu.alltypes.timestamp_col, functional_kudu.alltypes.year, functional_kudu.alltypes.month
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.alltypes]
     predicates: CAST(date_string_col AS TINYINT) IS NULL, timestamp_col < NULL
     kudu predicates: smallint_col IS NULL, timestamp_col > TIMESTAMP '1987-05-19 00:00:00.000000010', tinyint_col IS NOT NULL
     mem-estimate=9.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=97B cardinality=1
     in pipelines: 00(GETNEXT)
====
select * from functional_kudu.alltypes where
timestamp_col in (cast('2010-03-01 00:00:00' as timestamp),
                  cast('2010-03-01 00:01:00' as timestamp))
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=9.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.alltypes.id, functional_kudu.alltypes.bool_col, functional_kudu.alltypes.tinyint_col, functional_kudu.alltypes.smallint_col, functional_kudu.alltypes.int_col, functional_kudu.alltypes.bigint_col, functional_kudu.alltypes.float_col, functional_kudu.alltypes.double_col, functional_kudu.alltypes.date_string_col, functional_kudu.alltypes.string_col, functional_kudu.alltypes.timestamp_col, functional_kudu.alltypes.year, functional_kudu.alltypes.month
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.alltypes]
     kudu predicates: timestamp_col IN (TIMESTAMP '2010-03-01 00:00:00', TIMESTAMP '2010-03-01 00:01:00')
     mem-estimate=9.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=97B cardinality=2
     in pipelines: 00(GETNEXT)
====
select * from functional_kudu.alltypes where
timestamp_col in (cast('2010-03-01 00:00:00' as timestamp),
                  null,
                  cast('2010-03-01 00:01:00' as timestamp))
---- PLAN
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
Per-Host Resources: mem-estimate=9.75MB mem-reservation=0B thread-reservation=2
  PLAN-ROOT SINK
  |  output exprs: functional_kudu.alltypes.id, functional_kudu.alltypes.bool_col, functional_kudu.alltypes.tinyint_col, functional_kudu.alltypes.smallint_col, functional_kudu.alltypes.int_col, functional_kudu.alltypes.bigint_col, functional_kudu.alltypes.float_col, functional_kudu.alltypes.double_col, functional_kudu.alltypes.date_string_col, functional_kudu.alltypes.string_col, functional_kudu.alltypes.timestamp_col, functional_kudu.alltypes.year, functional_kudu.alltypes.month
  |  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
  |
  00:SCAN KUDU [functional_kudu.alltypes]
     predicates: timestamp_col IN (TIMESTAMP '2010-03-01 00:00:00', NULL, TIMESTAMP '2010-03-01 00:01:00')
     mem-estimate=9.75MB mem-reservation=0B thread-reservation=1
     tuple-ids=0 row-size=97B cardinality=3
     in pipelines: 00(GETNEXT)
====
