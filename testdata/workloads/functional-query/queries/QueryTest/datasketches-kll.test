====
---- QUERY
# Check that ds_kll_quantile returns error for strings that are not serialized sketches.
select ds_kll_quantile(date_string_col, 0.5) from functional_parquet.alltypestiny;
---- CATCH
UDF ERROR: Unable to deserialize sketch
====
---- QUERY
select ds_kll_quantile(ds_kll_sketch(float_col), -0.1) from functional_parquet.alltypestiny;
---- CATCH
UDF ERROR: Rank parameter should be in the range of [0,1]
====
---- QUERY
select ds_kll_quantile(ds_kll_sketch(float_col), 1.1) from functional_parquet.alltypestiny;
---- CATCH
UDF ERROR: Rank parameter should be in the range of [0,1]
====
---- QUERY
select
    ds_kll_quantile(ds_kll_sketch(id), 0),
    ds_kll_quantile(ds_kll_sketch(tinyint_col), 0),
    ds_kll_quantile(ds_kll_sketch(smallint_col), 0),
    ds_kll_quantile(ds_kll_sketch(int_col), 0),
    ds_kll_quantile(ds_kll_sketch(bigint_col), 0),
    ds_kll_quantile(ds_kll_sketch(float_col), 0)
from functional_parquet.alltypestiny;
---- RESULTS
0,0,0,0,0,0
---- TYPES
FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT
====
---- QUERY
select
    ds_kll_quantile(ds_kll_sketch(id), 0.5),
    ds_kll_quantile(ds_kll_sketch(tinyint_col), 0.5),
    ds_kll_quantile(ds_kll_sketch(smallint_col), 0.5),
    ds_kll_quantile(ds_kll_sketch(int_col), 0.5),
    ds_kll_quantile(ds_kll_sketch(bigint_col), 0.5),
    ds_kll_quantile(ds_kll_sketch(float_col), 0.5)
from functional_parquet.alltypestiny;
---- RESULTS
4,1,1,1,10,1.100000023841858
---- TYPES
FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT
====
---- QUERY
select
    ds_kll_quantile(ds_kll_sketch(id), 1),
    ds_kll_quantile(ds_kll_sketch(tinyint_col), 1),
    ds_kll_quantile(ds_kll_sketch(smallint_col), 1),
    ds_kll_quantile(ds_kll_sketch(int_col), 1),
    ds_kll_quantile(ds_kll_sketch(bigint_col), 1),
    ds_kll_quantile(ds_kll_sketch(float_col), 1)
from functional_parquet.alltypestiny;
---- RESULTS
7,1,1,1,10,1.100000023841858
---- TYPES
FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT
====
---- QUERY
select ds_kll_sketch(double_col) from functional_parquet.alltypestiny;
---- CATCH
AnalysisException: No matching function with signature: ds_kll_sketch(DOUBLE)
====
---- QUERY
select ds_kll_sketch(string_col) from functional_parquet.alltypestiny;
---- CATCH
AnalysisException: No matching function with signature: ds_kll_sketch(STRING)
====
---- QUERY
select ds_kll_sketch(timestamp_col) from functional_parquet.alltypestiny;
---- CATCH
AnalysisException: No matching function with signature: ds_kll_sketch(TIMESTAMP)
====
---- QUERY
select ds_kll_sketch(cast(date_string_col as date format 'MM/DD/YYYY'))
from functional_parquet.alltypestiny;
---- CATCH
AnalysisException: No matching function with signature: ds_kll_sketch(DATE)
====
---- QUERY
# Check that ds_kll_quantile() returns null for null inputs.
select ds_kll_quantile(c, 0.5) from functional_parquet.nulltable;
---- RESULTS
NULL
---- TYPES
FLOAT
====
---- QUERY
# Check that ds_kll_sketch() returns null for null inputs.
select ds_kll_sketch(d) from functional_parquet.nulltable;
---- RESULTS
'NULL'
---- TYPES
STRING
====
---- QUERY
# Check that ds_kll_sketch() returns null for empty input.
select ds_kll_sketch(f2) from functional_parquet.emptytable;
---- RESULTS
'NULL'
---- TYPES
STRING
====
---- QUERY
# Write sketches to a table as string and get an estimate from the written sketch.
# Note, the plan is to write sketches as binary instead of strings. For this we have to
# wait for the binary support (IMPALA-9482).
create table sketch_store
    (year int, month int, float_sketch string)
stored as parquet;
insert into sketch_store
    select
        year,
        month,
        ds_kll_sketch(float_col)
    from functional_parquet.alltypessmall
    group by year, month;
select
    year,
    month,
    ds_kll_quantile(float_sketch, 0.5)
from sketch_store;
---- RESULTS
2009,1,4.400000095367432
2009,2,4.400000095367432
2009,3,4.400000095367432
2009,4,4.400000095367432
---- TYPES
INT,INT,FLOAT
====
---- QUERY
# Check that sketches made by Hive can be read and used for estimating by Impala.
select
    ds_kll_quantile(f, 0.5) as f,
    ds_kll_quantile(repetitions, 0.5) as r,
    ds_kll_quantile(some_nulls, 0.5) as sn,
    ds_kll_quantile(all_nulls, 0.5) as an,
    ds_kll_quantile(some_nans, 0.5) as snan,
    ds_kll_quantile(all_nans, 0.5) as anan
from kll_sketches_from_hive;
---- TYPES
FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT
---- RESULTS
100.1999969482422,25000.099609375,50.90000152587891,NULL,50.5,NULL
====
