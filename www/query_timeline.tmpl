<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

{{> www/common-header.tmpl }}

</div>

<div class="container">

<style id="css">
</style>

{{> www/query_detail_tabs.tmpl }}


{{?plan_metadata_unavailable}}
<h3>Plan not yet available. Page will update when query planning completes.</h3>
{{/plan_metadata_unavailable}}

{{^plan_metadata_unavailable}}
<h3>Timeline</h3>
  <label>
  <input type="checkbox" id="plan_order" onClick="renderTiming()"/>
  Print tree in plan order (if unchecked, print in fragment order)
  </label>

</div>

<div id="timing_diagram" style="border:1px solid #c3c3c3; overflow:hidden;">
  <div style="margin-top:5px; border:1px solid #c3c3c3;">
    <svg id="phases_header" height="15px"></svg>
  </div>
  <div style="margin-top:5px; border:1px solid #c3c3c3; overflow-y:auto;">
    <svg id="fragment_diagram"></svg>
  </div>
  <div style="margin-top:5px; border:1px solid #c3c3c3;">
    <svg id="timeticks_footer" height="15px"></svg>
  </div>
</div>


{{/plan_metadata_unavailable}}

{{> www/common-footer.tmpl }}

<script>

$("#plan-timing-tab").addClass("active");

var profile = {};
var phases = [
  { color: "#C0C0FF", label: "Prepare" }
, { color: "#E0E0E0", label: "Open" }
, { color: "#FFFFC0", label: "Produce First Batch" }
, { color: "#C0FFFF", label: "Send First Batch" }
, { color: "#C0FFC0", label: "Process Remaining Batches" }
, { color: "#FFC0C0", label: "Close" }
];
var fragment_colors = ["#A9A9A9", "#FF8C00", "#8A2BE2", "#A52A2A", "#00008B", "#006400",
                       "#228B22", "#4B0082", "#DAA520", "#008B8B", "#000000", "#DC143C"];
var fragments = [];
var rownum = 0;
var char_width = 6;
var max_namelen = 0;
var all_nodes = [];
var receiver_nodes = [];
var profile_available = false;
var maxts = 0;

function get_svg_rect(fill_color, x, y, width, height, dash, stroke_color){
  var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
  rect.setAttribute("x", x + "px");
  rect.setAttribute("y", y + "px");
  rect.setAttribute("width", width + "px");
  rect.setAttribute("height", height + "px");
  rect.setAttribute("fill", fill_color);
  if (dash) {
    rect.setAttribute("stroke", stroke_color);
    rect.setAttribute("stroke-dasharray", "2 2");
  }
  return rect;
}

function get_svg_text(text, fill_color, x, y, height, container_center, max_width = 0){
  var text_el = document.createElementNS("http://www.w3.org/2000/svg", "text");
  text_el.appendChild(document.createTextNode(text));
  text_el.setAttribute("x", x + "px");
  text_el.setAttribute("y", y + "px");
  text_el.style.fontSize = height / 1.5 + "px";
  if (container_center) {
    text_el.setAttribute("dominant-baseline", "middle");
    text_el.setAttribute("text-anchor", "middle");
  }
  text_el.setAttribute("fill", fill_color);
  if (max_width != 0) {
    text_el.setAttribute("textLength", max_width);
    text_el.setAttribute("lengthAdjust", "spacingAndGlyphs");
  }
  return text_el;
}

function get_svg_line(stroke_color, x1, y1, x2, y2, dash){
  var line = document.createElementNS("http://www.w3.org/2000/svg", "line");
  line.setAttribute("x1", x1 + "px");
  line.setAttribute("y1", y1 + "px");
  line.setAttribute("x2", x2 + "px");
  line.setAttribute("y2", y2 + "px");
  line.setAttribute("stroke", stroke_color);
  if (dash) {
    line.setAttribute("stroke-dasharray", "2 2");
  }
  return line;
}

function DrawBars(svg, rownum, row_height, events, xoffset, px_per_ns) {
  var color_idx = 0;
  var last_end = xoffset;
  bar_height = row_height - 2;

  events.forEach(function(ev) {
    if (ev.no_bar == undefined) {
      var x = last_end;
      var y = rownum * row_height;

      var endts = Math.max.apply(null, ev.tslist);
      var width = xoffset + endts * px_per_ns - last_end;
      last_end = x + width;

      // Block phase outline
      svg.appendChild(get_svg_rect("#000000", x, y, width, bar_height, false));
      if (width > 2) {
        svg.appendChild(get_svg_rect(phases[color_idx].color, x + 1, y + 1,
            width - 2, bar_height - 2, false));
      }

      color_idx++;

      // Grey dividers for other instances that finished earlier
      ev.tslist.forEach(function(ts) {
        var dx = (endts - ts) * px_per_ns;
        var ignore_px = 2; // Don't print tiny skews
        if (Math.abs(dx) > ignore_px) {
          svg.appendChild(get_svg_line("#505050", last_end - dx, y , last_end - dx,
              y + bar_height, false));
        }
      });
    }
  });
}

function collectFromProfile(ignored_arg) {
  rownum = 0;
  maxts = 0;
  max_namelen = 0;
  fragments = [];
  var color_idx = 0;
  all_nodes = [];
  receiver_nodes = [];
  try {
    // First pass: compute sizes
    profile.child_profiles[2].child_profiles.forEach(function(fp) {

      var cp = fp.child_profiles[0];

      if (cp.event_sequences != undefined) {
        var fevents = fp.child_profiles[0].event_sequences[0].events;

        // Build list of timestamps that spans instances for each event
        for (var en = 0; en < fevents.length; ++en) {
          fevents[en].tslist = [ fevents[en].timestamp ];
          for (var instance = 1; instance < fp.child_profiles.length; ++instance) {
            if (fp.child_profiles[instance].event_sequences != undefined) {
              fevents[en].tslist.push(
                  fp.child_profiles[instance].event_sequences[0].events[en].timestamp);
            }
          }
        }

        fragment = {
          name: fp.profile_name,
          events: fevents,
          nodes: [ ],
          color: fragment_colors[color_idx]
        }
        // Pick a new color for each plan fragment
        color_idx = (color_idx + 1) % fragment_colors.length;
        maxts = Math.max(maxts, fevents[fevents.length - 1].timestamp);
        max_namelen = Math.max(max_namelen, fp.profile_name.length);
        var node_path = [];
        var node_stack = [];
        cp.child_profiles.forEach(function get_plan_nodes(pp, index) {
          if (pp.node_metadata != undefined) {
            node_path.push(index);
            var name_flds = pp.profile_name.split(/[()]/);
            var node_type = name_flds[0].trim();
            var node_id = name_flds.length > 1 ? name_flds[1].split(/[=]/)[1] : 0;
            node_name = pp.profile_name.replace("_NODE", "").replace("_", " ")
                .replace("KrpcDataStreamSender", "SENDER")
                .replace("Hash Join Builder", "JOIN BUILD")
                .replace("join node_", "");
            if (node_type.indexOf("SCAN_NODE") >= 0) {
              var table_name = pp.info_strings.find(({ key }) => key === "Table Name")
                  .value.split(/[.]/);
              node_name = node_name.replace("SCAN",
                  "SCAN [" + table_name[table_name.length - 1] + "]");
            }

            var is_receiver = node_type == "EXCHANGE_NODE" ||
                (node_type == "HASH_JOIN_NODE" && pp.num_children < 3);

            var is_sender = (node_type == "Hash Join Builder" ||
                             node_type == "KrpcDataStreamSender");
            var parent_node;
            if (node_type == "PLAN_ROOT_SINK") {
              parent_node = undefined;
            } else if (pp.node_metadata.data_sink_id != undefined) {
              parent_node = receiver_nodes[node_id]; // Exchange sender dst
            } else if (pp.node_metadata.join_build_id != undefined) {
              parent_node = receiver_nodes[node_id]; // Join sender dst
            } else if (node_stack.length > 0) {
              parent_node = node_stack[node_stack.length - 1];
            } else if (all_nodes.length) {
              parent_node = all_nodes[all_nodes.length - 1];
            }

            max_namelen = Math.max(max_namelen, node_name.length + node_stack.length + 1);

            if (pp.event_sequences != undefined) {
              var node_events = pp.event_sequences[0].events;

              // Start the instance event list for each event with timestamps from this instance
              for (var en = 0; en < node_events.length; ++en) {
                node_events[en].tslist = [ node_events[en].timestamp ];
                if (node_type == "HASH_JOIN_NODE" && (en == 1 || en == 2)) {
                  node_events[en].no_bar = true;
                }
              }
            }
            var node = {
                name: node_name,
                type: node_type,
                node_id: node_id,
                num_children: 0,
                child_index: 0,
                metadata: pp.node_metadata,
                parent_node: parent_node,
                events: node_events,
                path: node_path.slice(0),
                is_receiver: is_receiver,
                is_sender: is_sender
            }

            if (is_sender) {
              node.parent_node.sender_frag_index = fragments.length;
            }

            if (is_receiver) {
              receiver_nodes[node_id] = node;
            }

            if (parent_node != undefined) {
              node.child_index = parent_node.num_children++;
            }

            all_nodes.push(node);

            fragment.nodes.push(node);

            if (pp.child_profiles != undefined) {
              node_stack.push(node);
              pp.child_profiles.forEach(get_plan_nodes);
              node = node_stack.pop();
            }
            rownum++;
            node_path.pop();
          }
        });


        // For each node, retrieve the instance timestamps for the remaining instances
        for (var ni = 0; ni < fragment.nodes.length; ++ni) {
          var node = fragment.nodes[ni];
          for (var cpn = 1; cpn < fp.child_profiles.length; ++cpn) {
            var cp = fp.child_profiles[cpn];

            // Use the saved node path to traverse to the same position in this instance
            for (var pi = 0; pi < node.path.length; ++pi) {
              cp = cp.child_profiles[node.path[pi]];
            }
            console.assert(cp.node_metadata.data_sink_id == undefined ||
                           cp.profile_name.indexOf("(dst_id=" + node.node_id + ")"));
            console.assert(cp.node_metadata.plan_node_id == undefined ||
                           cp.node_metadata.plan_node_id == node.node_id);

            // Add instance events to this node
            if (cp.event_sequences != undefined) {
              for (var en = 0; en < node.events.length; ++en) {
                node.events[en].tslist.push(cp.event_sequences[0].events[en].timestamp);
              }
            }
          }
        }

        fragments.push(fragment);
      }
    });
    profile_available = true;
  } catch(e) {
    console.log(e);
    profile_available = false;
  }
}

function renderTiming(ignored_arg) {
  var plan_order = document.getElementById('plan_order').checked;

  var timing_diagram = document.getElementById('timing_diagram');
  var phases_header = document.getElementById('phases_header');
  var fragment_diagram = document.getElementById('fragment_diagram');
  var timeticks_footer = document.getElementById('timeticks_footer');

  phases_header.innerHTML = "";
  fragment_diagram.innerHTML = "";
  timeticks_footer.innerHTML = "";

  var row_height = 15;
  var display_height = window.innerHeight - timing_diagram.offsetTop - 70;
  fragment_diagram.parentNode.style.height = display_height * 1 + "px";
  fragment_diagram.setAttribute("height", rownum * row_height + "px");

  fragment_diagram.setAttribute("width", timing_diagram.clientWidth - 50);
  phases_header.setAttribute("width", fragment_diagram.clientWidth);
  timeticks_footer.setAttribute("width", fragment_diagram.clientWidth);

  var frag_name_width = (Math.max(2, (fragments.length - 1).toString().length) + 3) * char_width;
  var name_width = max_namelen * char_width + (frag_name_width + 2);
  var chart_width = fragment_diagram.clientWidth - name_width;

  var px_per_ns = chart_width / maxts;

  var text_y = row_height - 4;
  var color_idx = 0;
  var width = Math.ceil(chart_width / phases.length);
  phases.forEach(function(p) {
    var x = name_width + Math.ceil(chart_width * color_idx / phases.length);
    x = Math.min(x, phases_header.clientWidth - width);

    phases_header.appendChild(get_svg_rect("#000000", x, 0, width, row_height, false));
    phases_header.appendChild(get_svg_rect(phases[color_idx++].color, x + 1, 1,
        width - 2, row_height - 2, false));
    phases_header.appendChild(get_svg_text(p.label, "#000000", x + width / 2,
        text_y - 2, row_height, true, Math.min(p.label.length * char_width, width / 1.5)));
   });

  var rownum_l = 0;
  var max_indent = 0;
  var pending_children = 0;
  var pending_senders = 0;
  fragments.forEach(function printFragment(fragment) {
    if (!fragment.printed) {
      fragment.printed = true;

      var pending_fragments = [];
      var fevents = fragment.events;

      frag_name = fragment.name.replace("Coordinator ", "").replace("Fragment ", "");

      fragment_diagram.appendChild(get_svg_text(frag_name, fragment.color, 1, text_y,
          row_height, false));

      // Fragment/sender timing row
      DrawBars(fragment_diagram, rownum_l, row_height, fevents, name_width, px_per_ns);

      for (var i = 0; i < fragment.nodes.length; ++i) {
        var node = fragment.nodes[i];

        if (node.events != undefined) {
          // Plan node timing row
          DrawBars(fragment_diagram, rownum_l, row_height, node.events, name_width, px_per_ns);
          if (node.type == "HASH_JOIN_NODE") {
            fragment_diagram.appendChild(get_svg_text("X", "#000000",
                name_width + Math.min.apply(null, node.events[2].tslist) * px_per_ns,
                text_y, row_height, false));
            fragment_diagram.appendChild(get_svg_text("O", "#000000",
                name_width + Math.min.apply(null, node.events[2].tslist) * px_per_ns,
                text_y, row_height, false));
          }
        }

        if (node.is_receiver) {
          pending_senders++;
        } else if (node.is_sender) {
          pending_senders--;
        }
        if (!node.is_sender) {
          pending_children--;
        }

        var label_x = frag_name_width + char_width * pending_children;
        var label_width = Math.min(char_width * node.name.length,
            name_width - label_x - 2);
        fragment_diagram.appendChild(get_svg_text(node.name, fragment.color,
            label_x, text_y, row_height, false));

        if (node.parent_node != undefined) {
          var y = row_height * node.parent_node.rendering.rownum;
          if (node.is_sender) {
            var x = name_width + Math.min.apply(null, fevents[3].tslist) * px_per_ns;
            // Dotted horizontal connector to received rows
            fragment_diagram.appendChild(get_svg_line(fragment.color, name_width,
                y + row_height / 2 - 1, x, y + row_height / 2 - 1, true));

            // Dotted rectangle for received rows
            var x2 = name_width + Math.max.apply(null,fevents[4].tslist) * px_per_ns;
            fragment_diagram.appendChild(get_svg_rect("rgba(0,0,0,0)", x, y + 4, x2 - x,
                row_height - 10, true, fragment.color));
          }

          if (node.is_sender && node.parent_node.rendering.rownum != rownum_l - 1) {
            // DAG edge on right side to distant sender
            var x = name_width - (pending_senders) * char_width - char_width / 2;
            fragment_diagram.appendChild(get_svg_line(fragment.color,
                node.parent_node.rendering.label_end,
                y + row_height / 2, x , y + row_height / 2, false));
            fragment_diagram.appendChild(get_svg_line(fragment.color, x, y + row_height / 2,
                x, text_y - row_height / 2 + 3, false));
            fragment_diagram.appendChild(get_svg_line(fragment.color, x,
                text_y - row_height / 2 + 3, label_x + label_width,
                text_y - row_height / 2 + 3, false));

          } else {
            // DAG edge from parent to immediate child
            var x = frag_name_width + (pending_children + 1) * char_width - char_width / 2;
            fragment_diagram.appendChild(get_svg_line(fragment.color, x, y + row_height - 3,
                x, text_y - row_height + 6, false));
          }

        }
        node.rendering = { rownum: rownum_l, label_end: label_x + label_width };
        if (node.num_children) // Scan (leaf) node
          pending_children += (node.num_children - node.is_receiver);
        text_y += row_height;
        rownum_l++;

        if (node.is_receiver) {
          if (plan_order) {
            printFragment(fragments[node.sender_frag_index])
          } else {
            pending_fragments.push(fragments[node.sender_frag_index]);
          }
        }

      }

      // Visit sender fragments in reverse order to avoid dag edges crossing
      pending_fragments.reverse().forEach(printFragment);

    }
  });
  fragments.forEach(function(fragment) {
    fragment.printed = false;
  });
  rownum_l = 0;
  var text_y = (rownum_l + 1) * row_height - 4;

  // Time scale below timing diagram
  var ntics = 10;
  var sec_per_tic = maxts / ntics / 1000000000;
  var px_per_tic = chart_width / ntics;
  var x = name_width;
  var decimals = 2;
  for (var i = 1; i <= ntics; ++i) {
    var y = rownum_l * row_height;
    timeticks_footer.appendChild(get_svg_rect("#000000", x, y, px_per_tic,
        row_height, false));
    timeticks_footer.appendChild(get_svg_rect("#F0F0F0", x + 1, y + 1, px_per_tic - 2,
        row_height - 2, false));
    timeticks_footer.appendChild(get_svg_text((i * sec_per_tic).toFixed(decimals),
        "#000000", x + px_per_tic - decimals * char_width, text_y - 2, row_height, true));
    x += px_per_tic;
  }
}

function refresh() {
  var req = new XMLHttpRequest();
  req.onload = function() {
    if (req.status == 200) {
      profile = JSON.parse(req.responseText)["profile_json"];
      collectFromProfile();
      if (!profile_available) {
        setTimeout(refresh, 1000);
      } else {
        if (profile.child_profiles[0].info_strings.find(({key}) => key === "Query State").value
            != "FINISHED") {
          setTimeout(refresh, 1000);
        }
        renderTiming();
      }
    }
  }
  req.open("GET", make_url("/query_timeline?query_id={{query_id}}&json"), true);
  req.send();
}

window.addEventListener('resize', function(event) {
  if (profile_available) {
    renderTiming();
  }
}, true);

window.onload = refresh;

</script>
